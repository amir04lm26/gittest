# Init
git Init

# Config
git config --global user.name 'Amir JZ'
git config --global user.email 'z.amir04lm26@gmail.com'

# Add file to staging area
git add index.html

# Check the staging area
git status

# Add sets of changes to the stage
git add

# Git three trees
- repository
- staging index
- working
* Git label the changes usign SHA-1 algoritum
    - It's using the data to create this hash so if if the data changes, It will findout.
    - It's also using the commit message, author & also parent

# Discard the changes that we've made in working three
git checkout -- index.html

# Unstage the file or files that we've added to the staging three (using git add )
# *Revert back to the working three
git reset Head info.txt

# Remove file from repository three & staging three
git rm --cached index.html

# undo with
git add index.html

# Add specific format
git add *.html

# Add every file
git add .

# Commit
# *Use present tense
git commit

# Commit all of the changes
git add . && git commit
git commit -a (Skip adding to the stage)(This will only select all files to commit & It won't add new files to commit)

# Use -a & -m flags together
git add -am

# Multi line commit (don't use -m flag)
git commit
    # Abort the commit
    leave the message empty

# Change the git editor globaly
git config --global core.editor "code --wait"

# Get the condensed version of commits
    # Get the first line of commits with the shorten SHA (It only shows a gist of every commit)
git log --oneline

# Change the last commit
git commit --amend

# Log the commits
git log
git log -n 5 (Limits the commits to the 5 most recent ones)
git log -5
git log --since 2019-01-01
git log --until 2019-01-01
git log --until "3 days ago"
git log --after=2.weeks --before=3.days
git log --author "Amir" (It doesn't need the full name)
git log --grep="Bugfix" (Globaly search for the regular expression)
git log --grep="ghi" (Github Issue (standard expression to start the commit with))
git log info.txt (Show the changes that affected this file)
git log -p (Look at actual changes along with each commit)
git log --stat (Show statistics about what was changed in each commit)
git log --format=short (medium is default, oneline, short, full, fuller, email, raw)
git log --oneline (It's also shorten the hash)
git log --graph
git log --graph --all --oneline --decorate

# Show all of the branches (remotes & locals)
git branch

# Create a new branch
git branch newbranch

# To see all the branches
git branch -a

# To see all remote branches
git branch -r

# Change the branch
git checkout nenwbranch

# Create a new branch and check it out
git checkout -b new_branch
git checkout -b new_branch master (master is a optional parameter to select starting point)

# To see all merged branches
git branch --merged

# To see all branches that hasn't merged
git branch --no-merged

# Merge the changes
git merge newbranch -m "merge the newbranch with master"

# Abort the merge
git merge --abort

# Rename a branch
git branch -m new_name (-m => move), (It changes the current branch name)
git branch -m newbranch new_name (It changes the branch's name that we gave in the first parameter)

# To remove the newbranch after merging
git branch -d newbranch (we can also use numbers and underscore in the branch name)

# To remove a branch from remote
git push origin :newbranch (old way)
git push origin --delete newbranch

# To add a remote repository
git remote add origin https://github.com/amir04lm26/gittest.git
// OR
git remote add origin git@github.com:amir04lm26/gittest.git

# To delete a remote repository
git remote rm origin
    * origin => the name of the remote repository

# To push local repo to the remote
git push -u origin master
(push with the -u (short for --set-upstream))

# To show the remote repositories
git remote

# TO change the remote url
usage: git remote set-url [--push] <name> <newurl> [<oldurl>]
   or: git remote set-url --add <name> <newurl>
   or: git remote set-url --delete <name> <url>

    --push                manipulate push URLs
    --add                 add URL
    --delete              delete URLs

git remote set-url --push origin https://github.com/amir04lm26/gittest.git

# Push a local branch to the remote
git checkout -b newbranch
git push -u origin newbranch

# To set upstream branch with tracking
git branch -u origin/my_branch my_branch
    * origin/my_branch => remote
    * my_branch => local

# To remove tracking of a upstream branch
git branch --unset-upstream my_branch

# Push changes
git push

# Fetch the changes (does not change the master branch, does not merge)
git fetch origin
git fetch
    - In fetch we need to merge
    git merge origin/master (we are on master)

# Get the remote changes (does the both git fetch & git merge at once)
git pull

# Create a branch from remote branches (or another branches)
git branch new_branch origin/my_branch
    * We can not check remote branches

# Compare differences (compare file a which is the version in the staging three &
# file b which is the version in the working directory)
git diff
    - e,f,space to move forward
    - w,b to move backward
    - q to quit
    -S + return to toggle the pagginator

# Show different words only
git diff --color-words

# Compare changes in the staging three against repository three
git diff --cached(old method, both of them works)
git diff --staged

# Delete files (need commit to apply to the repository)
git rm file_to_delete.txt

# Rename a file
git mv app.js main.js

# Move a file
git mv app.js src/app.js

# View a previous commit
git show f302273d10813a768f13790d65c00c8e1452659d
git show f302273
git show f302273 --color-words

# View the differences between commits
git diff <The name of the oldest commit (that we want)>..<The name of the ending commit (that we want)>
git diff e3403b74..091e423
git diff e3403b74..HEAD(we can use HEAD to compare to the latest commit)

# View differences between branches
git diff master..new_branch ((Not Always)older branch first to see the changes since that time)

# View differences between files in different branches
git diff --color-words master..new_branch index.html

# Discard changes
git checkout -- index.html

# Dicard all changes
git checkout -- .

# Unstage files
git reset HEAD index.html

# Discard changes that we added to the staging three
git reset HEAD index.html
git checkout -- index.html
OR
git reset HEAD index.html && git checkout -- index.html

# (Revert a file in old commits)
# Check files in older commits
git checkout e60093c -- info.txt (--  => to say stay in the same branch)
    * It will set the changes to the staging three

    # Check the changes with diff
    git diff --staged

    # Add some new changes to the file in the old commit and create a new commit
    git commit -am "adds a new commit base on the info in a old commit"

# Revert a commit(Undo it)
git revert e6df009

# Remove files (would remove untracked files)
git remove
    -i interactive
    -n show the file that would remove
    -f remove the files

# List tracking files
git ls-tree HEAD

# Remove the last commit
git reset --soft HEAD~1

** Git only track directories that have a file inside
    - To keep tracking of a empty directory we can add .gitkeep file or anything else to it

# Select the parent (Ancestry)
de14621f^ (SHA^ or SHA~ or SHA~1) (^ => caret)
HEAD^
master^ (commit before the last commit in the master branch)

# Select the grand parent
de14621f^^
HEAD^^
master^^
HEAD~2

# Select the great grand parent
de14621f^^^
HEAD^^^
master^^^
HEAD~3

# List the contents of a tree object
git ls-tree <tree-ish>
git ls-tree HEAD

# List the contents with patern matching
git ls-tree HEAD assets (assets => directory)

# List the contents of a directory with patern matching
git ls-tree HEAD assets/

# Soft reset (Moves the HEAD pointer)
git reset --soft <tree-ish>
git reset --soft HEAD^
    # It leaves the changes in the staging tree
    # We can use the same command to un-reset (with the SHA)

# Mixed reset (This is the default choice) (Moves the HEAD pointer
  & Changes the staging index to match the repository)
git reset --mixed <tree-ish>
git reset
    # It leaves the changes in the working directory
    # We can use the same command to un-reset (with the SHA)

# Hard reset (Moves the HEAD pointer 
  & Changes the staging index to match the repository
  & Changes the working directory to match the repository)
git reset --hard <tree-ish>
    # Previous commits and all the chnages will be discarded
    # We can use the same command to un-reset (with the SHA)

# Make the child branch to look exactly the same as the parent
git reset --hard newbranch (newbranch => the parent name)

# Stash the changes
git stash save "label goes here"
    * Stash is independent from branches
    * So we can use a stash in every branches that we want

# Stash the changes include untracked ones
git stash -u save ""

# View stashed files
git stash list

# View a single stash (shows the diff)
git stash show stash@{0}

# View a single stash (the changes)
git stash show -p stash@{0}

# Retrieve stash files (removes a single stash & apply it to our working directory)
git stash pop
    * pop the first of the list (newest item)
git stash pop stash@{0}

# Retrieve stash files (without deleting the stash)
git stash apply

# Delete a stash
git stash drop stash@{0}

# Delete all stashes
git clear stash
